Comparable vs Comparator in Java

Comparable and Comparator in Java are very useful for sorting the collection of objects. Java provides some inbuilt methods 
to sort primitive types array or Wrapper classes array or list. 

Here we will first learn how we can sort an array/list of primitive types and wrapper classes 

==============================
Using comparable interface
===============================

A comparable object is capable of comparing itself with another object. The class itself must implements the java.lang.Comparable
interface to compare its instances.


Class Movie implements Comparable<Movie>{

 	private double rating; 
    private String name; 
    private int year; 
    
	public int comareTo(Movie m){
		return this.year - m.year;
	}
	 // Constructor 
    public Movie(String nm, double rt, int yr) 
    { 
        this.name = nm; 
        this.rating = rt; 
        this.year = yr; 
    } 
  
    // Getter methods for accessing private data 
    public double getRating() { return rating; } 
    public String getName()   {  return name; } 
    public int getYear()      {  return year;  } 
}

class Main 
{ 
    public static void main(String[] args) 
    { 
        ArrayList<Movie> list = new ArrayList<Movie>(); 
        list.add(new Movie("Force Awakens", 8.3, 2015)); 
        list.add(new Movie("Star Wars", 8.7, 1977)); 
        list.add(new Movie("Empire Strikes Back", 8.8, 1980)); 
        list.add(new Movie("Return of the Jedi", 8.4, 1983)); 
  
        Collections.sort(list); 
  
        System.out.println("Movies after sorting : "); 
        for (Movie movie: list) 
        { 
            System.out.println(movie.getName() + " " + 
                               movie.getRating() + " " + 
                               movie.getYear()); 
        } 
    } 
    
}





==========================
Using Comparator interface
===========================

Unlike Comparable, Comparator is external to the element type we are comparing. It’s a separate class. We create multiple separate 
classes (that implement Comparator) to compare by different members.

Collections class has a second sort() method and it takes Comparator. The sort() method invokes the compare() to sort objects.

To compare movies by Rating, we need to do 3 things :

Create a class that implements Comparator (and thus the compare() method that does the work previously done by compareTo()).
Make an instance of the Comparator class.

Call the overloaded sort() method, giving it both the list and the instance of the class that implements Comparator.




// Class to compare Movies by ratings 
class RatingCompare implements Comparator<Movie> 
{ 
    public int compare(Movie m1, Movie m2) 
    { 
        if (m1.getRating() < m2.getRating()) return -1; 
        if (m1.getRating() > m2.getRating()) return 1; 
        else return 0; 
    } 
} 
  
// Class to compare Movies by name 
class NameCompare implements Comparator<Movie> 
{ 
    public int compare(Movie m1, Movie m2) 
    { 
        return m1.getName().compareTo(m2.getName()); 
    } 
} 

//How to use?

RatingCompare ratingCompare = new RatingCompare(); 
        Collections.sort(list, ratingCompare); 






1) Comparable provides a single sorting sequence. In other words, we can sort the collection on the basis of a single element such as
 id, name, and price.	
The Comparator provides multiple sorting sequences. In other words, we can sort the collection on the basis of multiple elements 
such as id, name, and price etc.

2) Comparable affects the original class, i.e., the actual class is modified.	
Comparator doesn't affect the original class, i.e., the actual class is not modified.

3) Comparable provides compareTo() method to sort elements.	
Comparator provides compare() method to sort elements.

4) Comparable is present in java.lang package.	
A Comparator is present in the java.util package.

5) We can sort the list elements of Comparable type by Collections.sort(List) method.	
We can sort the list elements of Comparator type by Collections.sort(List, Comparator) method.



